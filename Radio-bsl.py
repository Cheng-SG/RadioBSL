#!/usr/bin/python

import sys
import math
import os.path
import subprocess
import time
try:
    import serial
except:
    print "You don't have serial module installed. Please install pySerial firrst!"
    sys.exit(1)

#compiled basestation Program
#by Cheng Li (vivid8710@gmail.com)
BaseStationProgram=""":104000005542200135D0085A8245FE1A3140003908
:104010003F4014000F9308249242FE1A20012F8380
:104020009F4F6C6F0011F8233F40EA090F9307245C
:104030009242FE1A20011F83CF431411F9232183DA
:10404000B0123A49474F3D4010003E40FF003F400C
:104050009615B012A06EF243E516F243FA1AB2407A
:10406000805A2001A242600182432E01A2428001B7
:1040700082431E01B24020026001B2402001800153
:10408000F24084FF5700C2435800B2400040820112
:104090003B400C003D4000080E430C4D0CDE5942E5
:1040A00057000A4C8A107AF0070079F0F8FF4AD9D5
:1040B000C24A5700C24C5600794003000A430843E5
:1040C0000F3C18429001385282489201B2F0FEFF34
:1040D000820192B38201FD271F427001084A0A4FF4
:1040E0007953EF230A883A900104012C0E4C0D11EC
:1040F0003B53D3230F4E3FF0E0003F90E0000220FF
:104100003EF0E0FF5C4257000D4E8D107DF0070041
:104110007CF0F8FF4DDCC24D5700C24E56005E42A7
:1041200057007EF007007ED080FFC24E5700E2426B
:104130005800F2F0FDFF000082437001B24002021D
:10414000600182439001B240020180011E42600181
:104150003EF0CFFF3ED02000824E60011E42800123
:104160003EF0CFFF3ED02000824E8001C2432600A9
:10417000C2432E00C2431B00C2431F00C243330090
:10418000C2433700C2432100F240E0FF2200F24068
:1041900030002900F2407B002A00C2431900F2409F
:1041A000F1FF1A00F240DDFF1D00F240FDFF1E008E
:1041B000F2433100F2433200C2433500F24336008D
:1041C000C2432500C2432D001F4270011E427001F0
:1041D0000E8F3E900128FA2BE2D31A00F2D21A0079
:1041E000F2D080FF1E00F2D010001E00F2D080FF3F
:1041F0001D00F2D010001D0003430343F2F0EFFF57
:104200001D00F2F0F7FF19005F43B0128A464F43DA
:10421000B0128A465F43B0128A465F43B0128A46A4
:104220005F43B0128A464F43B0128A464F43B012E2
:104230008A465F43B0128A46F2D010001D00F2D2C7
:104240001900E2D31900F2D010003200F2D02000A1
:104250003200F2D040003200F2D010003100F2D033
:1042600020003100F2D040003100B01228644F939A
:10427000FC23F243B415B2433011C2433211B243AE
:104280003411C2433611B2433811C2433A11B2431A
:104290003C11C2433E11B0129645C24F35161F4223
:1042A00012111F53824FE0158243E215B2F0EFFF67
:1042B0008601B24000408601B2405A162811F2F041
:1042C000EFFF2200E2D21E00F2F0FDFF1E00B2F06E
:1042D000EFFF8201B24000408201F243F015C24379
:1042E0001A16C2431B16C2431C16C2431D16E2D245
:1042F0001E00F2D040001E00F2D020001E00B012BE
:104300003A491B420611B0124C49824BF615B012C5
:104310000C47824C2A16824D2C16824E2E16824F46
:104320003016D2420411D815C243D915F2401F00ED
:104330001916F2401A003316B0120C47824C2A1696
:10434000824D2C16824E2E16824F30163E402A1673
:104350000D4E3D5007000C436F4EEE4D0000CD4F0B
:1043600000001C531E533D532C92F623D243AE152E
:10437000C243F31AD243DB15C2432816B012286495
:104380004F93FC234F47B0124C4932D2F2401000F9
:104390007800F24020007900C2437A00F240090020
:1043A0007C00C2437D00F2427B00F2D040001B0043
:1043B000F2D040001A00F2D080FF1B00F2F07F0024
:1043C0001A00F2F0DFFF0300F2D030000100F2D05B
:1043D00030000500C243FD1AC243FC1AC2432F112C
:1043E000C243F91AC243EE1AC2439215C243F41AE9
:1043F000C243DC15C243DA15C2431716B243121684
:10440000C2431616C243F115F240760006165F430A
:10441000B01236544F931920B0123A4982932211A8
:104420000324B0124C49193C92432211B0124C495A
:10443000B0123A49F2D020001D00B0124C493E4063
:1044400014000F43B012A24E083C6F43B0121A4A38
:104450004F9303205F43B0121A4AB0123A494A4FB1
:10446000863CC2930C117724B2B010006201082080
:10447000B2B0100064010420B2B01000660107243D
:104480001E4260013EF000033E9000022E245F4277
:1044900004003FB0C00005245F4271003FF02000DF
:1044A00026205F4205003FB0300005245F427900BE
:1044B0003FF020001E205F4270001FF31C245F426B
:1044C00071003FF020001A245F4272003FF020008C
:1044D00018245F4270002FF217245F4270003FF0F3
:1044E000200015207E400500133C6E43113C6E43B6
:1044F0000F3C6E430D3C7E4005000A3C7E400500AB
:10450000073C7E400500043C7E400500013C6E43B4
:10451000B2B01000A0011924B2B01000A20105240D
:10452000B2B2A2010F246E43103C1F42A2013FB061
:1045300000040B241D4260013DF000033D90000289
:104540000420023C4E43013C6E437E90050001284E
:104550006E42C24E26115E4226110E5E1E4E5C6FEA
:104560003ED2814E000022D132C203430343F29374
:10457000E5167727B012B6484B4F7F9372274F4A04
:10458000B0124C494F4BB0125C5B673F32D0F00029
:10459000FD3F30400A6F0B120A120912081207126F
:1045A00006123C404E830D431E42E0151F42E215A9
:1045B000B012B86C074D084E094F0E4C0F4712C38E
:1045C0000F100E10085E096F0993053438F339F0A7
:1045D000FF7F185309638248E0158249E2150F48AE
:1045E00036413741384139413A413B413041C24F70
:1045F00077005F4202003FF04000FB27F2F0BFFF70
:1046000002005F42760030411E4270013F900180FF
:104610000A283F5000801D4270010D8E0F9DFB2F18
:104620000E5F3F4000801D4270010D8E0F9DFB2FDD
:104630003041F2F0EFFF2A003041F2D010002A00A2
:1046400030411F429001013C0F4E1E4290010F9ECF
:10465000FB233041B2F0EFFF8401E2D31F00B2F040
:10466000FEFF8401B2F0FDFF84014F4F8F107E40AA
:1046700006000F5F7E53FD233FD00001824F84016F
:10468000B2D0100084014F4330414F9304245F4265
:1046900019006FD3043C5F4219007FF0FDFFC24F49
:1046A0001900F2D21900F2F0F7FF190030415C4F07
:1046B00002008C105E4F01000CDE0E4C8E104E4E30
:1046C00012C30E1012C30E103EF003005D4E686F51
:1046D0008D110E4C8E104E4E7C40060012C30E10F3
:1046E0007C53FC235E4E686F8E110E5D3E500600BB
:1046F0000F5E3041F24080FF9315C243B615C243AE
:10470000EA16C243E416C243AF1530410B120A1237
:10471000091208123150F2FFC2931C118120B0120D
:104720003246F2F0EFFF2900B0123A463F40300225
:10473000B0120846B01232463F403C00B012084664
:104740000B43F2B01000280009243B5005003F4005
:104750000500B01208463B90F000F3233F40A4014F
:10476000B01208463B90F0005D2C7A427B4033004B
:104770001BB30B24B0123A463F400500B012084666
:10478000B01232463F4041000A3CB0123A463F4028
:104790003C00B0120846B01232463F400500B0124D
:1047A000084612C34B107A53E3233A40201679424D
:1047B0004B4312C34B10B0123A463F400500B012B3
:1047C0000846B01232463F400500B0120846584233
:1047D00028003F404100B012084678B01000022483
:1047E0007BD080FF7953E523CA4B00001A533A90DF
:1047F0002816DD230E434F435FEE20167D420C4FFB
:104800001CF312C34F100C9302247FE08CFF7D53E6
:10481000F6231E533E92F0234F930620D2431C11E1
:104820004E43043C6E42023C7E400600C2931C1183
:104830000A240F430D410D5FDD4F211600001F5369
:104840003F900600F7234E9308243D420E430F414C
:104850003F500600B012A06E163CC1430600F14066
:1048600012000700F1406D000800F140450009000A
:10487000F14050000A00D14102000B00D14101007B
:104880000C00E1410D001C4106001D4108001E41C5
:104890000A001F410C0031500E00384139413A41A5
:1048A0003B4130414F930324D24370003041F2F03A
:1048B000FEFF700030415F42E5164E4F3E509615A8
:1048C0006D4EC24DE5167D930220F243FA1AFE4367
:1048D000000030415F930C2403286F931820103C94
:1048E0001F4262018F105FF312241F427201304198
:1048F0001F4264018F105FF30A241F42740130418C
:104900001F4266018F105FF302241F42760130417F
:104910005F43B012A448F2F0BFFF04003F401B0009
:10492000FFF0FDFF0000FFF0FBFF0000FFF0F7FFCE
:1049300000004F43B012A44830410E4232C203433C
:1049400003433EF25F4301204F4330414F93012424
:1049500032D230410B12B0123A491D42EA151E42C2
:10496000E8160D9303240D5E6D4D013C4D43C24D81
:1049700077006E531D42EC164C4E0D9C1C2C4E4D78
:104980001A3C5D4202003DF04000FB275B4276008E
:104990001D4214160D9303240C5DCC4B00001D42E8
:1049A000EA150D9304241D52E8166D4D013C4D434C
:1049B000C24D7700013C4E4E1C42E8160D4C1D5373
:1049C000824DE8160D9EDD2BB0124C493B41304123
:1049D0000B12B0123A495B43C2931A1601244B439F
:1049E000B0124C494F4B3B4130410B120A124A4F17
:1049F000B0123A494B4FB012D0494F9305244F4B58
:104A0000B0124C494F43063C4F4BB0124C494F4AF1
:104A1000B012EE453A413B4130410B120A124A4F67
:104A2000B0123A495B435A921B1601244B43B01211
:104A30004C494F4B3A413B413041B0123A49F2F0B8
:104A4000FBFF1D00B0124C4930410B124B4FB0120E
:104A50003A494E4BFE93961506201E43C29BFA1A06
:104A600003240E43013C1E430E930E20F293E516E1
:104A70000320C24BE516043C5E42FA1ACE4B961553
:104A8000C24BFA1A4B43023C7B400500B0124C4922
:104A90004F4B3B413041C29320113920F2930B110F
:104AA0003620B012D0494F933224D2433416C293E9
:104AB00095150224C2433416C29334162A24F29068
:104AC00003001E112920C293081128205E420A11FA
:104AD0007E9316244F4E5D4FF015C24D0A117D9303
:104AE0000220F2430911FF43F015C24E3216F24381
:104AF0000811D2431E117F400900B0124A4A043CFB
:104B0000D2430811C2431E11B0121049053C5F4345
:104B100030417F40050030414F4330414F433041E9
:104B2000D293081113205F421E115F9305207F402E
:104B30000900B0124A4A083C6F930A20D24232164A
:104B40000811F24003001E114F4330415F433041D2
:104B50005F4330410B120A1209125942101669B311
:104B60001E241A4208161B420A161C420C161D422D
:104B70000E160E8A0F7B0F9D122802200E9C0F2806
:104B800059B3052479F0FDFFC2491016083C0E4CBC
:104B90000F4D0E5A0F6B824E0816824F0A167F4039
:104BA0000C00B0124A4A39413A413B413041B012FF
:104BB0003A49F2F0BFFF0200F2D040000000B0120C
:104BC0004C49B012544930414E4EC243F81582430D
:104BD000EA15824F1416824EEC168243E8160E93A5
:104BE0000324B012AE4B033C7F42B0124A4A4F43FB
:104BF00030410B120A1209120A4F494EB0123A49BB
:104C00004B4FB012D0494F9305244F4BB0124C4933
:104C10004B431E3C4F4BB0124C49B2407F00FA153B
:104C20007F407F00B012EE454B4F4E49C243F8150E
:104C30008243EA15824A1416824EEC168243E81625
:104C40000E930324B012AE4B033C7F42B0124A4A8B
:104C50004F4B39413A413B413041B0123A4A5E43F1
:104C60001F422811B012F24B30410B124B4FB012C1
:104C70003A49C24B2411B0124C496F42B0124A4A11
:104C80003B4130410B124B4F92431A11C2439515D1
:104C9000B012964A4F4BB0126A4C3B413041B012B1
:104CA0003A49E2D21D00B0124C4930410B120A12AF
:104CB00009124B4FB0123A494A4FC29B0B110424C0
:104CC000B0124C495F434C3CF2430B115B42201144
:104CD0004B930920B0123A49C2431A16B0124C49FC
:104CE000B012964A353C4C43494B021232C2034340
:104CF000C24C3001F240CDFF38011E423A01324130
:104D00008E1012C34E1012C34E104D4E4D5D4D5DB0
:104D10004E5D4C8E4E4C4F4C0D497CF00F004C9329
:104D200003240D117C53FB3F1DF31724C24E0B11BE
:104D30001E434D4F7DF00F004D9303240E5E7D53B7
:104D4000FB3F4BCEC24B20117F400700B0124A4AB6
:104D50004F4AB0124C494F43033C4C4E5C53C53F45
:104D600039413A413B4130417F400300B012AC4CE5
:104D70004F4330410B120A120912B0123A49494FFF
:104D80001B420416B01242460A4F1F4280015FF3D5
:104D900004241B53B01242460A4F0C430D430D4BE3
:104DA0000E4A0F430A4C0B4D0ADE0BDF4F49B0127F
:104DB0004C490E4A0F4B39413A413B4130410B12AD
:104DC0000A1209120812B012744D084E094F1E4201
:104DD000F2151F42F4150A4E0B4F1A52EC151B62C6
:104DE000EE15099F09280220089E06280B9F10280F
:104DF00009200A9E0D28063C0B9F04280F9B27289C
:104E00000A9E252C099B04280B992128089A1F2CFF
:104E10000C4A0D4B0C880D790D9303203C900180BA
:104E200018280E480F493E5000800F63824EF2153D
:104E3000824FF4150E4C0F4D3E5000803F63824E62
:104E4000EC15824FEE153C4000800D430A3C0C43AC
:104E50000D43824AF215824BF4158243EC158243CE
:104E6000EE150A4CB01242460E4F0E880E9A052CD3
:104E70000C4A0C8E3C900300062CB01242462F5375
:104E8000824F9201033C0C5F824C9201B2F0FEFF14
:104E90008201B2D010008201384139413A413B4190
:104EA00030410B120A120912081221830A4E0B4FCD
:104EB000B012744D084E094FB0123A498248F215AB
:104EC0008249F415824AEC15824BEE15814F0000A1
:104ED000B012BE4D2F41B0124C49215338413941D7
:104EE0003A413B4130410B12B0123A494B4FB0129C
:104EF00096453E404600B0127E6D0E4F3E500B0070
:104F0000824EF61A0F43B012A24E4F4BB0124C49CC
:104F10003B4130410B120A12B0123A494A4FB29249
:104F20001A1112207F400900B012EA49B012684DF0
:104F3000B0129E4C92431A117F400300B0126A4C8B
:104F40004F4AB0124C492F3CB0123A4AC293FB1A56
:104F500003247F400500013C6F42B012EA494E4FE6
:104F60003EF205204F43B012EA493FF204205B4372
:104F70003F400300033C4B433F400500824F1A1162
:104F8000B0129E4C4F4AB0124C494B930724C24377
:104F90002E11B012684DB012E64E053C3E40400165
:104FA0000F43B012A24E3A413B4130410B120A125C
:104FB0000912494F0A4EB0123A494B4FB012D0492C
:104FC0004F9305244F4BB0124C494F430D3C4F4B70
:104FD000B0124C494F49B012EE450F4A8F10B01233
:104FE000EE454F4AB012EE4539413A413B4130411E
:104FF0000B120A12091208120712084F4A4E074DE7
:105000004B4CB0123A49494FB012D0494F93052446
:105010004F49B0124C494F43213C4F49B0124C49C3
:105020004A4A0A584F4A7FD080FFB012EE45494F96
:105030000E4A12C30E104F4E7FF0C0FFB012EE4565
:105040004A4B093C4E4B0F4A0F8E0E4F0E576F4E78
:10505000B012EE457B534B93F5234F49374138410E
:1050600039413A413B4130410B123150F4FFB0120B
:105070003A494B4F3D423E402A160F41B012A66DB1
:105080001E42D815C14E08008E10C14E09001E42A6
:10509000F615C14E0A008E10C14E0B004F4BB012D8
:1050A0004C497C400C000D414E433F406001B01222
:1050B000F04F31500C003B413041B0123A49F2E020
:1050C00010003100B0124C493041B0123A49F2E0C0
:1050D00040003100B0124C4930414F930B205F42E9
:1050E000DA155F537FF00700C24FDA15C243171677
:1050F000B012CA504F43B0124A4A30410B124B4FC4
:10510000B0123A49C24B1B16B0124C493B413041D8
:105110000B120A1209121B42DE155A4B80004A93E9
:1051200002207A401F00B0123A4AC29AAC150724F6
:105130004E4A3ED0E0807F401500B012AC4FC24ACC
:10514000AC15694BB0123A494A4FB012D0494F934F
:1051500004244F4AB0124C491F3C4F4AB0124C49EC
:10516000B2403E00FA157F403E00B012EE454F4976
:105170007F534F4FC243F815824BEA1582431416F2
:10518000824FEC168243E8160F930324B012AE4B05
:10519000033C7F42B0124A4A39413A413B413041D7
:1051A000B0123A49F2F0BFFF1D00B0124C49304135
:1051B000B0123A49F2D040001D00B0124C493041C3
:1051C0000B12B0123A495B423316B0124C490F4BE6
:1051D0000F5F0F5F0F5B3F502E010E4F3ED0004020
:1051E0007F401800B012AC4F3B4130410B12B0125F
:1051F0003A494B4FC293AE1504241E43C293F31A8F
:1052000001200E434E4E8E100E5E0E5E0E5EC29359
:10521000DB1504241D43C293281601200D433ED004
:10522000E2220D5D0D5D0D5D0D5D0EDD7F40110017
:10523000B012AC4F4F4BB0124C493B4130410B12B6
:105240000A12091208120712B0123A49474F1A42BD
:10525000E6151B42E815B01242460D4F1F42800171
:105260005FF305241A530B63B01242460D4F12C36D
:105270000D1012C30D1012C30D1012C30D1012C366
:105280000D10084D09430E4A0F4B4FEA0FEA8F10DD
:105290004E4E8E100E5E0F6F0E5E0F6F0E5E0F6F16
:1052A00008DE09DF4F47B0124C490E480F4937411D
:1052B000384139413A413B4130410B120A1209123F
:1052C0000812B0123E52084E094F1E422A111F42C8
:1052D0002C110A4E0B4F1A52B0151B62B215099FC2
:1052E00009280220089E06280B9F102809200A9EE4
:1052F0000D28063C0B9F04280F9B27280A9E252C6F
:10530000099B04280B992128089A1F2C0C4A0D4B45
:105310000C880D790D9303203C90010418280E4849
:105320000F493E5000040F63824E2A11824F2C1108
:105330000E4C0F4D3E5000FC3F63824EB015824F25
:10534000B2153C4000040D430A3C0C430D43824A15
:105350002A11824B2C118243B0158243B2150A4C9C
:105360000A5A0A5A0A5A0A5A0A5AB012424608589F
:1053700008580858085808580E4F0E880E9A042CE2
:105380000A8E3A900300062CB01242462F53824FE9
:105390009601033C0A5F824A9601B2F0FEFF860145
:1053A000B2D010008601384139413A413B41304189
:1053B0000B12B0123A494B4F5F43B012A448F2F0BF
:1053C000DAFF70005F43B012A448F2F03F0004001F
:1053D0003E401B00FEF0EFFF0000FEF0DFFF00008C
:1053E0003D4010116F4D7FD00500C24F7000D24D6F
:1053F000010071001D420E11C24D74008D104D4D03
:10540000C24D7500C2437300EED30000EED200001F
:10541000FED20000F2D0400004004F43B012A44876
:10542000F2F03F000200F2F03F0000004F4BB012DC
:105430004C493B4130410B124B4FB0123A494E4B55
:105440003E501A16CE9300000420DE4300004B436A
:10545000013C5B43B0124C494F4B3B4130410B1276
:105460000A124B4FB0123A494A4F4F43B0123654CA
:105470004F932F20C24B0B11C29308113C20F29086
:1054800003001E1138207F400700B0124A4A2C3C0E
:10549000D2431E11C2433216B012204B253CC29398
:1054A000321622241E43F293F0150420C2930911F0
:1054B00001240E430E931820F2930A110320C243D5
:1054C0000A11043C5E420911CE43F015C243091192
:1054D0000B3C1E434D4B7DF00F004D9303240E5E9D
:1054E0007D53FB3FC2DE20114F4AB0124C494F435F
:1054F0003A413B413041C2931E11D123C93F0B12A7
:105500000A124B4FB0123A494A4F4F43B012365429
:105510004F9306244F4AB0124C497F4005001E3C71
:10552000C29308111E20F29003001E111A200B3C9A
:10553000E2431E11C2433216B012204BC29308112F
:105540000620B012B053C24B0B114B43033CC24375
:105550001E110A3C4F4AB0124C494F4B3A413B4155
:105560003041C2931E11E427B0123A49C2431A16C1
:10557000B0124C495B43EE3FA243A615D243B61589
:10558000E2920B1105246F42B012FE544F93032098
:10559000B0125A4C30416F42B0125E5430410B127F
:1055A000B0123A494B4F8293A6151824C243B61540
:1055B0005E42AF154E930324F2B220000520D2B311
:1055C000200008204E9303247E53C24EAF15B01224
:1055D0007855073C9243A615C243AF156F42B012EF
:1055E000AC4C4F4BB0124C493B413041B012F446E9
:1055F000B0129E4CB0123A4A7F42B012EA497F4242
:10560000B012EA49B0129E4C6F42B012AC4CB012CC
:105610009E5530410B120A12091208120712174246
:105620001416C293F8150224304012591F42FA157D
:105630003FB0400002203040AA587FF0BFFF7F906B
:105640003F000224304012591B4228116E4BC24EBB
:10565000AA151F42A6153F90050037243F9006006B
:1056600082242F93022430409A58B2400500A61598
:105670005D4293154D9E25242428F2B22000082077
:10568000D2B3200005204F4E7FE34F5DC24F9315EC
:105690004E9317380E240F4B1F537E9203287E40E3
:1056A0000700033CB2400600A615B012C84B3040BC
:1056B0001259C243B615B0129E4C6F42B012AC4C98
:1056C000E93CB012EC5530401259B2400600A61524
:1056D000C293DB154124C29328163E205F4B020083
:1056E0008F105E4B01000FDE3FF0200035245A4B37
:1056F00007008A105F4B06000ADFB0123A491942D0
:10570000F615B0124C490A9908245F4B07008F1018
:105710005E4B06000FDE3F931F205F4B02008F1091
:105720005E4B01000FDE3FF007001F931520B01203
:105730009E4CB0123A4A7F400A00B012EA49B012B9
:105740009E4CB0123A4A5E42AA157E50F9FF0F4BAA
:105750003F52B012F24BDD3C5E42AA157E50F9FF7B
:105760000F4B3F52A23FB0129E4CC293AF15032085
:105770006F42B012AC4CC293AF150324F2B22000BA
:105780000B20D2B3200008245A42E4164A93042482
:10579000F2900B00AA150E2C1F422811CF43830054
:1057A000CF438700CF438600CF438500FF4080FF73
:1057B0008400373C5942EA165A9319200F490F5F6B
:1057C0000F5F3F503A16284F1C4F02001D42281110
:1057D000CD4887000E4C0F488F108E104FEE0FEE05
:1057E000CD4F8600CD4C85008C10CD4C84001953D4
:1057F00079F00700C249EA167A53C24AE416112426
:105800001F422811CF438300CF438700CF43860038
:10581000CF438500FF4080FF8400C243EA16C243A5
:10582000E4165F42AA150F5BCF9300003334079351
:1058300031245F4B02008F105FDB01007FF0070017
:105840001D4228116F931F201F42DE150F93222443
:10585000B29007001A111E20DF9D030003001A20DA
:10586000B2F0EFFF82016E4DDF4382000E5DDF4E2E
:10587000FFFF7E006E4E7EF07F00CF4E7F004F43D5
:10588000B012844C073C5F9305207F400A00B012A1
:105890004A4A3F3CB0129E553C3CC243B615B0123A
:1058A0009E4C6F42B012AC4C343C7F903E00312095
:1058B000B0129E4CB2921A111120B0123A4A7F4097
:1058C0000900B012EA49B0129E4CB012684D9243E2
:1058D0001A117F400300B0126A4C1B3CC293FB1AA2
:1058E0000520A2421A11B012144F133CB012684D99
:1058F000B24003001A11B01296453E403601B01274
:105900007E6D0E4F3E500B00824E40110F43B01281
:10591000A24E3741384139413A413B4130410B12A7
:105920000A120B4FB0123A494A4F0F4BB012AE4613
:10593000FF403F0000004F4AB0124C498243F01A2A
:105940006F43B01236544F936E205F4235164E4F60
:105950005E53C24E3516CB4F0300B0123A494A4F40
:105960006F43B0121A4A4F930B204F4AB0124C4962
:10597000B0123A49C2431C16B0124C495F43553C21
:105980006F42B012FC50824B00164F4AB0124C4985
:105990005F4B02008F105E4B01000FDE3FF020CC0A
:1059A0004E4F3ED041008F104F4F8F100EDFCB4E29
:1059B00001008E10CB4E0200CB438200CB437E0011
:1059C000CB437F00CB438700CB438600CB4385008E
:1059D000FB4080FF8400D2431E161B420016B0120B
:1059E0003A491E421A113E9202241E930324B01219
:1059F0004C49143CA2431A11D243FB1A824BDE15C8
:105A0000C2432E11B0124C497F400300B012FE5425
:105A10004F9306247F400300B0125E544F43053C71
:105A2000B0121051FB3F7F4005003A413B413041ED
:105A30000B120A1209120B4D4A4C7C9073004F2C2A
:105A4000CD4F0B00CD4E06008E10CD4E0700B0128C
:105A50003A491942D815B0124C49CB490400891073
:105A6000CB490500B0123A4919420611B0124C490F
:105A7000CB4908008910CB4909005F4B01003FD09A
:105A800040885E4B02008E100FDECB4F01008F105E
:105A9000CB4F02004F4A7F500D00CB4F0000C29306
:105AA00003110824C24303110F4BB0121E594F9328
:105AB0000F20193CC24AFE15C243FF15824B141138
:105AC0007F400D00B0124A4AC29303110A24033CDE
:105AD000F2430311083CC243E4154F43043C6F43B7
:105AE000023C7F40090039413A413B4130410B12B1
:105AF0000A1209120812494F484E4D4F0D5D8D4351
:105B00000216C24300111D4202160D9304245F4287
:105B1000EF1A1FF30224D2430011C2930011142084
:105B20005B4D07008B105A4D06006C4D7C50F3FF07
:105B30000E4B0EDA5F4D0B00B012305A4F93042417
:105B40007F400F00B0124A4A499303204F48B012D9
:105B5000DA50384139413A413B4130410B120A1287
:105B60000912081207123150F6FF7F901000022828
:105B7000304018644F4F0F5F104F0C6FB0123A490E
:105B80004E4FD292DA15DC150520C293171602206B
:105B9000304084634F4EB0124C495E42DA150F4ECE
:105BA0000F5F0F5F3F50B8153C4F2F4F021232C2AC
:105BB0000343824E3201B2408A0038011D423A014D
:105BC00032413D5042114E4FCD4F06008F104F4F86
:105BD0004B4FCD4F0700FD4090FF0B008293021604
:105BE0001F20824D02164F4C7F500D00CD4F0000FC
:105BF000C2930011022030401864C24300114F4B81
:105C00008F104E4E4C4C0EDF7F4090FFB012305A3A
:105C10004F93022030401864D24300118243021691
:105C20004F433040C45E5F42FC1AC29FFD1A0720FA
:105C3000C293F91A0420C243941530401864C24339
:105C4000AD154F4F7E4007000F5F7E53FD235F4F22
:105C5000EE166F52C24FF41AF2407E007F003040C1
:105C60001864B0123A494B4F5F43B0125446924306
:105C70001A11C2431811C2439515C243AC154F4BBC
:105C8000B0124C49B0123A49814F0800B012F446A4
:105C90009243A615C243B615F2F0FEFF2500F2F0BE
:105CA000FEFF2300D2D32400D2D325001F410800D9
:105CB000B0124C49B0123A494B4FA2922211052022
:105CC0007F400300B012EA494F4BB0124C49B0126A
:105CD0003A494B4FB0129E4C4F43B012AC4C4F4B15
:105CE000B0124C496F43013C4F43B012FC5030405E
:105CF0001864B0123A495B422411B0124C497F40FB
:105D00000300B0121A4A4F933D24B0123A494A4F49
:105D100082431A11B2F0EFFF8201B2F0EFFF84016B
:105D2000F2F0FDFF1F007F400300B012AC4CB01238
:105D30009E4C4F4AB0124C49B0123A498243A615C4
:105D4000814F0800B012F446B0129E4CF2F0FEFFF4
:105D50002500F2F0FEFF23001F410800B0124C495D
:105D600082432211B012A051B0123A49F2F0DFFF83
:105D70001D00B0124C49B012B0517F400300B01268
:105D80004A4A033C6F43B012FC501A420016B0124C
:105D90003A49C2431C16B0124C498293F01A0224AD
:105DA00030401864F2430311C293001102243040C2
:105DB0001864829A02160224304018644E4B304018
:105DC000BE63B0123A494B4FC293F81A02243040D6
:105DD0008463D243F81AA292221104205F43B012C6
:105DE0005E54523C7F400600B0124A4A4D3CB0120D
:105DF0003A49C243F81A30408463B0123A495B42D0
:105E00000B11B0124C497B900500022830401864F9
:105E10004F4B0F5F104F2C6FB0123A4AB0123A49F5
:105E20004B4FA2932211022430408463B2400300FE
:105E300022113E4018007F401D00B012AC4FF2F01E
:105E4000EFFF2500F2F0EFFF2300F2F0EFFF240058
:105E5000F2D0100025005F43B012EA493E407F02B5
:105E60007F401C00B012AC4FB012C051B012EC51C8
:105E70003E40562A7F401700B012AC4F3E40FF8094
:105E80007F401500B012AC4F4F4B30408463B012CE
:105E90003A4A7F400600B012EA49B012C051B0122F
:105EA000EC51B0126850B0129E4CB0123A4A7F408A
:105EB0000300B012EA49B0129E4C5F43B012AC4CE2
:105EC0007F400600B0124A4A30401864B0123A4A85
:105ED000B0123A494B4FB012D0494F9304244F4B64
:105EE000B0124C490D3C4F4BB0124C497F4053000F
:105EF000B012EE454F43B012EE454F43B012EE459F
:105F0000B0129E4C6F43B012AC4C30401864B012CB
:105F10003A495B421A11B0124C496B9208247B92A9
:105F20000A246B931E20B012105130401864B01236
:105F3000144F30401864B0123A4A7F400900B01242
:105F4000EA49B0129E4CB012684DB0123A499243E1
:105F50001A11B0124C497F400300B0126A4C304015
:105F60001864B012684D30401864B0125A4C30407A
:105F70001864B0123A49814F0800B01214563040EC
:105F80008063B0123A49D24232160811F24003003F
:105F90001E11B0124C49C29308110220B012B05326
:105FA000C29308110224304018647F4007008A3FE2
:105FB0001B422811694B4E490E5B6F4E4F5F0F43DA
:105FC0000F6FCB4F81006F4E7FF07F00CB4F7F0074
:105FD000DB4EFFFF7E00584B02005A4B0100B0120F
:105FE0003A495742AE15B0124C49479348244E489F
:105FF0008E104F4A0EDF8E104E4E12C30E1012C37B
:106000000E103EF003002E931E205A4B07008A10FC
:106010005F4B06000ADFB0123A491842F615B0127B
:106020004C490A980B245F4B07008F105E4B06000B
:106030000FDE1E433F9303240E43013C1E430E9389
:106040001E203040A2623E90030002243040A26233
:1060500091422A16000091422C16020091422E16FF
:1060600004009142301606003D420E410F4B3F5056
:106070000600B012866D0F9302243040A262799020
:106080000D00022C3040A2621B4228115E4B020020
:106090008E105F4B01000EDF0F4E8F104F4F12C35B
:1060A0000F1012C30F103FF003000C4B3C500600C2
:1060B0008E104E4E7D40060012C30E107D53FC2301
:1060C0003E90030002242E43013C3E423F900300D9
:1060D00002242F43013C3F420C5F0A430F430D4C07
:1060E0000D5F6D4D0A5D1F530F9EF93B574B03002B
:1060F000F243F21AB0123A495C42F21A3E403011B1
:106100000D432A9E0720CE9702000320C24CF21AAC
:10611000C13C4C4D1D532E522D92F323C24CF21A0A
:10612000B0124C495842F21AB0123A4978930324FB
:10613000C29816110420584216115D43013C4D438C
:106140004E480E5E0E5E8E4A3011CE4732114D9390
:1061500007245E4216115E537EF00300C24E1611F4
:10616000B0124C49B0123A49484F0F4BB012AE46EC
:106170006A4F4F48B0124C49CB93810090247A90DB
:106180003F008D205A4B07008A105F4B06000ADF44
:10619000B0123A4918420611B0124C490A980B2421
:1061A0005F4B07008F105E4B06000FDE1E433F93D0
:1061B00003240E43013C1E430E937124FB9090FF79
:1061C0000B006D204A497A50F3FF7A907F00672CCC
:1061D000C293F91A62200C4B3C500C005F42FD1A2E
:1061E0000E4F7D4007000E5E7D53FD23CE4AEE1616
:1061F0005E4B09008E105D4B08000EDD494E0D4FC1
:10620000784007000D5D7853FD23CD49F016084E08
:1062100088100E4F7D4007000E5E7D53FD23CE4853
:10622000F1164859C248E6160D430D3C684C0E4F16
:10623000794007000E5E7953FD230E5DCE48F216BD
:10624000F25CE6161D534D9AF12B5E42E6167EE394
:106250005E53C24EE6167D4007000F5F7D53FD235F
:10626000CF4EEF16B0123A494A4F5E42FD1A5E53C6
:106270007EF00700C24EFD1A5E92FC1A0220D24345
:10628000F91AC293941505205F43B0124A4AD243CB
:1062900094154F4AB0124C49023CB012BA50824B8E
:1062A0002811B0123A49C243B615B0124C49B01287
:1062B0009E55B23CC293AB1528201A4236161B429B
:1062C0003816B0123A491842B0151942B215185290
:1062D0002A1119622C11B0124C49824A3616824B8F
:1062E0003816C243AB15B0123A4982482A11824986
:1062F0002C11824AB015824BB215814F0800B012A2
:10630000BA521F410800B0124C49B0123E52213C13
:10631000B0123E520A4E0B4FB2F0EFFF8601E2B3CD
:1063200010167A24084E094F1882081619720A1698
:106330001E420C161F420E160E880F79084E094F8A
:106340000F493E9363203990FF7F6020653C0E4AE1
:106350000F4BB012544B603C8248361682493816B7
:10636000D243AB15B0123A49824A2A11824B2C1102
:106370008248B0158249B215814F0800B012BA5256
:106380001F410800B0124C49473C5F42E4155F9240
:1063900003114224C24F03114F9313201F421411C3
:1063A000B0121E594F933824F24303111E421411A8
:1063B000C29300113120829E02162E204E4F4F4371
:1063C000223CF2430311283CC293EF1A25243840A3
:1063D00002164A435B435F42EF1A4BBF0B248843CC
:1063E00000004FCBC24FEF1A4A9304207F400300B6
:1063F000B012DA504B5B5A5328537A92EC230C3C80
:106400005E435F420011B012EE5A063C0F939F3B71
:10641000A3231E939C2BA03F31500A0037413841E3
:1064200039413A413B413041F293E5160824B0121C
:10643000B6487F930624B0125C5B5F4330414F4304
:1064400030414F4330410B120A1209120812071251
:10645000061205127F9202283040F2674F4F0F5FFD
:10646000104F366F1F4282018F105FF304241F42CA
:1064700092013040F267B2F0EFFF82018293EC1597
:1064800049208293EE1546201F421A113F50FDFF0E
:106490003F9006002F2C0F5F104F466FF2B0100098
:1064A00020000824A2421A113E4007000F43B012F8
:1064B000A24E203CB012E64E1D3C7F400300B012BD
:1064C000FE544F9305247F400300B0125E54123CEB
:1064D000B012144F0F3C4F430B3C7F400900B012E9
:1064E000EA495F43B0125446B012684D7F4007003E
:1064F000B012844C9293221102243040F267A243DE
:106500002211B012A051B012B0514F43B0125E54DC
:106510003040F267B012BE4D3040F2671F42840136
:106520008F105FF302203040F26718429401B2F0FE
:10653000FEFF8401B2F0FDFF8401B012744D0C4ED9
:106540000C880D43064E074F068C077D1F421A111B
:106550003F90050004243F900600B820983CB240CC
:1065600006001A11D243B515C24318116F43B01279
:1065700054461C42DE15CC4687000F460D478F104F
:106580008D104FED0FEDCC4F86000F47CC478500A7
:106590008F10CC4F8400CC9383006424654C7550DD
:1065A000FBFF4945095C6D490A430B430B4D8B10BA
:1065B0000C430D435D4901000CDA0DDB5A49030021
:1065C0000B430CDA0DDB5A4902004BEA0BEA8B1045
:1065D0004A4A8A100CDA0DDB0C860D77C94C030091
:1065E0000A4D8C108A104CEA0CEAC94C02000F4D7F
:1065F000C94D01008F10C94F0000B0123A4A6C42D9
:106600000D494E450F43B012F04FB0129E4C6F49EA
:106610000C430D430D4F8D100A430B435B490100A2
:106620000CDA0DDB5A4903000B430CDA0DDB5A4937
:1066300002004BEA0BEA8B104A4A8A100CDA0DDB97
:106640000C560D67C94C03000F4C0C4D8F108C106D
:106650004FEC0FECC94F02000F4DC94D01008F10D8
:10666000C94F00001D42DE155F4D02008F105D4DC9
:1066700001000FDD3FF020000224D2439515B01237
:10668000684DB2F0EFFF8201E2B31C00B220C243BA
:10669000B5155F43B01254461D42DE155F4D020032
:1066A0008F105D4D01000FDD3FF020000924B24046
:1066B00007001A113E4000010F43B012A24E033CE6
:1066C0004F43B012844CE2B31C009324C2931811C0
:1066D0002720C293B5152420D243B5156F43B012BD
:1066E00054465C421C005D42E4167D920E2C4F4DD8
:1066F0005F52EA163FF007000F5F0F5F8F463A16B2
:106700008F473C165D53C24DE416D24318118248A0
:10671000FC15E2B31C006D204E4C6EF35A43012071
:106720004A43D293B5156520C243B5155F43B012F5
:106730005446C24318114A935C200F481F82FC152F
:106740003F900A00562C5F42E4164F9303247F5378
:10675000C24FE4161F42DE150F934B24CF43830034
:10676000CF438700CF438600CF438500FF4080FFA3
:1067700084003F3C1F4286018F105FF303241F42B9
:106780009601373CB2F0EFFF86018293B0150820E6
:106790008293B21505207F400B00B0124A4A293C73
:1067A000B012BA52263C1F4288018F105FF3212499
:1067B0001F4298011E3C1F428A018F105FF319246B
:1067C0001F429A01163C1F428C018F105FF3112467
:1067D0001F429C010E3C1F428E018F105FF3092463
:1067E0001F429E01063C9253E6158263E8159253C0
:1067F0000416354136413741384139413A413B4130
:1068000030410F120E120D120C124F43B012D44829
:106810003C413D413E413F41B1C0F000000000130A
:106820000F120E120D120C121F422E014F4F12C3E7
:106830004F10B012D4483C413D413E413F41B1C0B0
:10684000F000000000130F120E120D120C124F4335
:10685000B01246643C413D413E413F41B1C0F00071
:10686000000000130F120E120D120C121F421E0117
:106870004F4F12C34F10B01246643C413D413E4160
:106880003F41B1C0F000000000130F120E120D12B4
:106890000C125F422F114F930724F2407C007F00BF
:1068A0007F53C24F2F113E3C5F42F41A4F933A245C
:1068B0005E42AD154E9F242C4C4E5F42FC1A7D402B
:1068C00007000F5F7D53FD230F5C5F4FEE16C293F1
:1068D00092150C204D4F7D5084FF7D9003000A2CB3
:1068E000D2439215F2407D007F001C3CC2439215BA
:1068F0007FF0DFFFC24F7F005E53C24EAD15123CEA
:106900004E9F10205F42FC1A5F537FF00700C24F7A
:10691000FC1AC243F91AC243F41A5F43B0124A4A3E
:10692000B012CA503C413D413E413F41B1C0F00030
:10693000000000130F120E120D120C125F427E00A7
:10694000D29317160320B012BA509F3C7F907E005E
:106950000320D2431616993C7F907C0096245E4219
:1069600016164E9306247F907D000320D243EE1A24
:106970008C3CD293EE1A04207FD02000C243EE1A42
:106980007E900500452C4E4E0E5E104E526F6F529B
:10699000C24FF115C29F0616032CC2431616753C52
:1069A000E2431616723CC24F1816F2400300161648
:1069B0006C3CC24F1216C2431316C25F1816E24255
:1069C0001616633C4E4F8E1082DE12165E42DC15A8
:1069D0005D42F1156D827D907300112C4E4E0212B6
:1069E00032C20343824E3201B2408A0038011E4255
:1069F0003A0132413E5042113E500C00013C0E43E0
:106A0000824EA815C25F1816F240050016163D3CCE
:106A10001E42A815CE4F00001E53824EA8155F528D
:106A20001816C24F18165D4216165D53C24D161643
:106A30005E42F1154E9D292CC24316164F93252018
:106A40005D42DC154F4D0F5F0F5F3F50B8154E4E46
:106A50002E828F4E00009F42121602004F4D5F5350
:106A60007FF00700C24FDC155F92DA150220D24397
:106A700017164F43B0124A4AC29394150420F240AD
:106A80007C007F00023CD2532F113C413D413E41EE
:106A90003F41B1C0F000000000130F120E120D12A2
:106AA0000C1221835E4223005F4225004FFE4F4FB0
:106AB000814F000091B300000E24F2F0FEFF23008E
:106AC0009293A6150520A243A615B0127855553C01
:106AD000D253AF15523CA1B3000005245F422300FE
:106AE0007FF0FDFF483CA1B2000005245F42230077
:106AF0007FF0FBFF403CB1B2000005245F42230061
:106B00007FF0F7FF383CB1B0100000001A24F2F01B
:106B1000EFFF2300A2422211F2F0EFFF2500F2F076
:106B2000EFFF23000E437F401D00B012AC4FB012A8
:106B30006850B0129E4CB0123A4A6F43B0124A4AA3
:106B40001C3CB1B02000000005245F4223007FF010
:106B5000DFFF113CB1B04000000005245F4223007C
:106B60007FF0BFFF083CB1B08000000006245F4208
:106B700023007FF07F00C24F230021533C413D4161
:106B80003E413F41B1C0F000000000130F120E1251
:106B900021835E422B005F422D004FFE4F4F814FFD
:106BA000000091B3000005245F422B007FF0FEFF40
:106BB0003B3CA1B3000005245F422B007FF0FDFFAA
:106BC000333CA1B2000005245F422B007FF0FBFFA5
:106BD0002B3CB1B2000005245F422B007FF0F7FF91
:106BE000233CB1B01000000005245F422B007FF071
:106BF000EFFF1A3CB1B02000000005245F422B00DB
:106C00007FF0DFFF113CB1B04000000005245F427F
:106C10002B007FF0BFFF083CB1B0800000000624CD
:106C20005F422B007FF07F00C24F2B0021533E417B
:106C30003F41B1C0F000000000130F120E120D1200
:106C40000C125E4276005F421E114F931C24183CCA
:106C5000C293081118201F4214160F9304241F52C8
:106C6000E816CF4EFFFF9292EC16E816032CB012F6
:106C70005449093CF2F0BFFF0000B0121456033C27
:106C80007F900300E5273C413D413E413F41B1C07B
:106C9000F000000000130F125F4270003FF0200070
:106CA00006245F4270002FF202245F4270003F41D1
:106CB000B1C0F000000000130B120A1209120812F2
:106CC0000712061205120412084C094D0A430B4321
:106CD0000C4E0D4F0E430F43B012246D344135411D
:106CE00036413741384139413A413B4130410B123D
:106CF0000A1209120812071206120512041218418C
:106D00001200194114001A4116001B411800B0125C
:106D1000246D3441354136413741384139413A419A
:106D20003B41304104430543064307430E3C12C335
:106D30000B100A10091008100428045C056D066E7B
:106D4000076F0C5C0D6D0E6E0F6F0893F0230993A7
:106D5000EE230A93EC230B93EA230C440D450E46D5
:106D60000F4730417C4010000D4E0E430F5F0E6EFA
:106D70000E9D02280E8D1FD31C83F8233041B012C4
:106D8000646D0F4E30410B120D930A247B4F7C4EE5
:106D90004B9C04244F4B4E4C0F8E033C3D53F43F11
:106DA0000F433B4130410B120A120912081207121D
:106DB0000D9370240F9E6E24342C0C4E0CDF1CF3AC
:106DC0001B240C4E0CEF1CF307202D9307280B4EB1
:106DD0001BF32C430C8B033C0C4D013C1C430D8CD2
:106DE0000A4C094E0B4FFB4900001B533A53FB233F
:106DF0000A4F0A5C0E5C013C0A4F0B4D12C30B108C
:106E00000B24094B084E0C4ABC4800002C53395344
:106E1000FB230B5B0E5B0A5B1DF33C24EA4E000078
:106E2000393C0E5D0C4F0C5D0B4C0BDE1BF31B2431
:106E30000B4C0BEE1BF306203D90030003280B4E7A
:106E40001BF3013C0B4D0D8B094E0A4C084B088C73
:106E50003A533953EA490000074A0758F9233BE3FC
:106E60001B530C5B0E5B0B4D12C30B100E240A4B15
:106E7000084E094C28832983A94800003A53FA2375
:106E80000A8B0B4A0B5B0E5B0C5B1DF30324DC4E81
:106E9000FFFFFFFF3741384139413A413B41304123
:106EA0000B120A12091208123D900600092C0C4F11
:106EB000043CCC4E00001C533D530D93FA23203C60
:106EC0004E4E4B4E0B9303240C4B8C100BDC1FB31C
:106ED00006243D53CF4E0000094F1953013C094F82
:106EE0000C4D12C30C100A49084C8A4B00002A535F
:106EF0003853FB230C5C0C591DF30224CC4E0000CC
:0C6F0000384139413A413B413041001317
:106F0C007C5B265C625CE85CF25CC25DEE5DFA5D0B
:106F1C00725F825FB05FB46210638A63C86300649F
:106F2C00185E8E5ECC5E0E5F6A5F64641C6574676F
:106F3C00A667B667C667D667E6679C64BA64DA6408
:106F4C00F464D664BA648A6A8E69A669B269C46943
:106F5C000000100050009000D000F000009C0208CF
:106F6C0001FFFFFF2200010001FFFFFF01000200F3
:046F7C0012A201005C
:10FFE00092458C6B8A6834699A6A206802689245E7
:10FFF000966C3A6C9245924564684668924500401A
:0400000300004000B9
:00000001FF
"""

class Packet:
    Txlenth = 0
    ser  = ''
    MaxPacketLength = 128

    def __init__(self,port,baudrate=115200,tout=0.005):
        self.ser = serial.Serial(port,baudrate,timeout=tout)

    def send(self,payload,dst,ReqAck=True):
        if len(payload) ==0:
            return False
        if (len(payload)) >self.MaxPacketLength:
            return False

        TxPacket = []
        TxPacket.append(len(payload))
        TxPacket.append(0)
        TxPacket.append(dst%256)
        TxPacket.append((dst>>8)%256)
        for i in payload:
            TxPacket.append(i%256)
        TxPacket[1] = 256 - sum(TxPacket[2:])%256
        TxPacket[1] %= 256
        tmp = [126]
        for i in TxPacket:
            if i >123 and i<127:
                tmp.append(125)
                tmp.append(i-32)
            else:
                tmp.append(i)
        #print tmp
        mstr = []
        for m in tmp:
            mstr.append(chr(m))
            #print "{0:02X}".format(m),
        #print ''
        fstr = ''.join(mstr)
        if ReqAck==False:
            self.ser.write(fstr)
            return True
        else:
            self.ser.timeout=0.005
            for i in range(5):
                self.ser.flushInput()
                self.ser.write(fstr)
                for j in range(20):
                    data=self.ser.read()
                    if data=='\x7C':
                        return True
            #print "UART Send fail"
            return False

    def receive(self,Tout,src='all'):
        RxCount = 0
        RxLength = 0
        RxSum = 0
        RxAlter = 0
        Payload = []
        RxPacket =[]
        RxSrc = src
        self.ser.timeout = 0.002
        Tout=time.time()+Tout;
        while True:
            data = self.ser.read()
            if time.time()>Tout:   #return if timeout
                return []
            if data == '':
                continue
            if data == '\x7E':
                RxCount = 1
                continue
            if data == '\x7C':
                continue
            if data == '\x7D':
                RxAlter = 1
                continue;
            if RxAlter == 1:
                if data == '\x5E':
                    data = '\x7E'
                elif data == '\x5D':
                    data = '\x7D'
                elif data == '\x5C':
                    data = '\x7C'
                RxAlter = 0

            if RxCount<=0:
                RxCount = 0
                continue
            if RxCount== 1:
                #RxLength = ord(data)+6
                RxLength = ord(data)+4
                if RxLength > self.MaxPacketLength:
                    RxCount = 0
                    RxLength = 0
                    continue
                RxCount += 1
                continue
            elif RxCount ==2 :
                RxSum = ord(data)
                RxCount += 1
            elif RxCount ==3 :
                RxSrc = ord(data)
                RxSum += ord(data)
                RxCount += 1
            elif RxCount ==4 :
                RxSrc = RxSrc+(ord(data)<<8)
                RxSum += ord(data)
                RxCount += 1
                RxPacket =[]
            elif RxCount<=RxLength:
                RxSum += ord(data)
                RxPacket.append(ord(data))
                RxCount += 1
                if RxCount > RxLength:
                    RxSum %= 256
                    if RxSum == 0:
                        self.ser.write('\x7C')
                        if src=='all':
                            break
                        elif RxSrc == src:
                            break
                    RxCount = 0
                    RxLength = 0
        #print ["%02X"%b for b in RxPacket]
        return RxPacket

class RFBsl:
    def __init__(self):
        self.MaxDataSize=30;
        return

    def SetCheckSum(self,msg):
        if(len(msg)<2):
            return msg;
        msg[1]=0;
        sum = 0
        for i in range(len(msg)):
            msg[i] = msg[i] % 256
            sum = sum + msg[i]
        sum = sum%256
        sum = (256-sum)%256
        msg[1] = sum
        return msg

    def Connect(self,pkt,ID):
        msg = [2,0,0x5A,0xA5,0,0]
        msg = self.SetCheckSum(msg)
        for i in range(1500):
            if pkt.send(msg,ID)==False:
                continue
            recmsg=pkt.receive(0.2,ID)
            if len(recmsg)==4:
                ackcmd=recmsg[0]+(recmsg[1]<<8)
                ackdata=recmsg[2]+(recmsg[3]<<8)
                #print "{0:04X},{1:04X}".format(ackcmd,ackdata)
                if ackcmd == 0x5000:
                    self.MaxDataSize = ackdata
                    if self.MaxDataSize > 114:
                        continue
                    for j in range(30):
                        recmsg=pkt.receive(0.05,ID)
                        if len(recmsg)==4:
                            ackcmd=recmsg[0]+(recmsg[1]<<8)
                            ackdata=recmsg[2]+(recmsg[3]<<8)
                            if ackcmd==0x5555 and ackdata==0xdead:
                                return True
        return False

    def Run(self,pkt,ID):
        msg = [2,0,0x22,0xA2,0,0]
        msg = self.SetCheckSum(msg)
        for i in range(5):
            if pkt.send(msg,ID)==False:
                continue
            for j in range(15):
                recmsg=pkt.receive(0.02,ID)
                if len(recmsg)==4:
                    ackcmd=recmsg[0]+(recmsg[1]<<8);
                    if ackcmd == 0x5000:
                        return True
                    elif ackcmd == 0x5111:
                        time.sleep(0.05)
                        break
        return False

    def SendData(self,pkt,ID,data):
        msg=[len(data),0,0x11,0xA1];
        msg[4:]=data
        msg = self.SetCheckSum(msg)
        seq = msg[5]+(msg[6]<<8)
        #print "{0:0.4f}: sending block {1}, len:{2}, Acks:".format(time.time(),seq,len(data)),
        for i in range(5):
            if pkt.send(msg,ID)==False:
                #print "SendDataFailed, retrying"
                continue
            for j in range(15):
                recmsg=pkt.receive(0.02,ID)
                if len(recmsg)==4:
                    ackcmd=recmsg[0]+(recmsg[1]<<8);
                    ackseq=recmsg[2]+(recmsg[3]<<8);
                    #print "[{0:04X} {1}]".format(ackcmd,ackseq,seq),
                    if ackcmd==0x5000:
                        if ackseq==seq:  #OK
                            #print ""
                            return True
                        else:
                            continue
                    else:
                        #print 'ack:{0:04X}'.format(ackcmd),'ackseq:',ackseq,'Seq:',seq
                        if ackcmd==0x5111:
                            time.sleep(0.05)
                            break;
                        continue
        #print ""
        return False

    def Program(self,pkt,ID,fin):
        class BreakIt(Exception):pass
        fin.seek(0)
        Total = sum(1 for line in fin)
        for m in range(3):
            try:
                T = time.time()
                print "Connecting to node {0} ...".format(ID)
                if self.Connect(pkt,ID)==False:
                    print "Failed to connect to node {0}".format(ID)
                    return False
                T = time.time()-T
                print "Node {0} connected in {2:0.1f} seconds, MaxDataSize={1}, start programming...".format(ID,self.MaxDataSize,T)

                T = time.time()
                fin.seek(0)
                seq = 0
                percent = 10
                print "%:0",
                msg = [0]
                for line in fin:
                    if line.startswith(':')==False:
                        print "Error: data format error"
                        return False
                        #print "{0:05d}{1}".format(seq,line),
                    datalen = int(line[1:3],16)+7
                    if self.MaxDataSize < (4+len(msg)+datalen):
                        #print msg,"len:{0}".format(len(msg))
                        #print "{0:0.4f}: sending block {1}, len:{2}".format(time.time(),seq,len(msg))
                        ack=self.SendData(pkt,ID,msg)
                        if ack==False:
                            print "Send data failed, no ack response retrying..."
                            raise BreakIt
                        elif ack!=True:
                            print "Send data failed @seq:{2:d} with ack[{0:04X},{1}], retrying...".format(ack[0],ack[1],msg[1]+(msg[2]<<8))
                            raise BreakIt
                        msg = [0]

                    msg[0] = msg[0]+1
                    if seq>Total*percent/100:
                        print "{0}".format(percent),
                        sys.stdout.flush()
                        percent = percent+10
                    msg.append(seq&255)
                    msg.append((seq>>8)&255)
                    for i in range(1,len(line)-2,2):
                        msg.append(int(line[i:(i+2)],16))
                    seq = seq+1

                if len(msg)>1:
                    #print msg,"len:{0}".format(len(msg))
                    #print "{0:0.4f}: sending block {1}, len:{2}".format(time.time(),seq,len(msg))
                    ack=self.SendData(pkt,ID,msg)
                    if ack==False:
                        print "Send data failed, no ack response retrying..."
                        continue
                    elif ack!=True:
                        print "Send data failed ack[{0:04X},{1}], retrying...".format(ack[0],ack[1])
                        continue

                if self.Run(pkt,ID)==False:
                    print "Programmig failed,retrying..."
                T = time.time()-T
                print "100\nProgram successfully finished in {0:0.1f} seconds".format(T)
                return True
            except BreakIt:
                pass
        print "Radio Programming failed after trying 3 times"
        return False


if len(sys.argv) != 3 and len(sys.argv) != 4:
    print "Usage:python {0} Port NodeID [DstID,HexFile.hex|SetupBaseStation]\n".format(sys.argv[0])
    print "Usage examples:"
    print "Usage 1: To Program the copiled APP to node 1 (and set its ID also to 1) ov-"
    print "         er radio through BaseStation connected to /dev/ttyUSB0"
    print "           Command:{0} /dev/ttyUSB0 1".format(sys.argv[0])
    print "Usage 2: To Program the copiled APP to node 1 but set its ID also to 2 ov-"
    print "         er radio through BaseStation connected to /dev/ttyUSB0"
    print "           Command:{0} /dev/ttyUSB0 1 2".format(sys.argv[0])
    print "Usage 3: To Program the a specific HEX file to node 1 over radio through Ba-"
    print  "        seStation connected to /dev/ttyUSB0"
    print "           Command:{0} /dev/ttyUSB0 1 main.hex".format(sys.argv[0])
    print "Usage 4: To initially program a node (connected to /dev/ttyUSB0) to make it "
    print "          a Radio programming basestation"
    print "           Command:{0} /dev/ttyUSB0 0 SetupBaseStation\n".format(sys.argv[0])
    sys.exit(1)

try:
    dst = int(sys.argv[2])
    dstID = dst
except:
    print "Error: destionation ID must be integer"
    sys.exit();

if len(sys.argv) == 3:
    fname = "build/telosb/main"
    if os.path.isfile(fname+".ihex")==False:
        print "Error: can not find file {0}.ihex, build your code first".format(fname)
        sys.exit()
    cmdarg= "tos-set-symbols --objcopy msp430-objcopy --objdump msp430-objdump --target ihex {0}.ihex {0}.ihex.out-{1} TOS_NODE_ID={1} ActiveMessageAddressC__addr={1}".format(fname,dst)
    if subprocess.call(cmdarg,shell=True):
        print "Error: gernerating programming file error"
        sys.exit(1)
    fin = open("{0}.ihex.out-{1}".format(fname,dst))

elif os.path.isfile(sys.argv[3]):
    try:
        fin=open(sys.argv[3])
    except:
        print "Error: can not open file {0}".format(sys.argv[3])
        sys.exit(1)

elif sys.argv[3]=="SetupBaseStation":  #program base station
    print "Preparing program file..."
    fname = "BaseStation.hex"
    fout=open(fname,'w')
    fout.write(BaseStationProgram)
    fout.close()
    cmdarg= "tos-set-symbols --objcopy msp430-objcopy --objdump msp430-objdump --target ihex {0} {0}.out-{1} TOS_NODE_ID={1} ActiveMessageAddressC__addr={1}".format(fname,dst)
    subprocess.call(cmdarg,shell=True)
    print "Programming device..."
    cmdarg = "tos-bsl --telosb -c {0} -r -e -I -p {1}.out-{2}".format(sys.argv[1],fname,dst)
    if subprocess.call(cmdarg,shell=True):
        print "Programming base station failed, refer to upper lines for error"
        cmdarg = "rm {0} {0}.out-{1}".format(fname,dst)
        subprocess.call(cmdarg,shell=True)
        sys.exit(1)
    cmdarg = "rm {0} {0}.out-{1}".format(fname,dst)
    subprocess.call(cmdarg,shell=True)
    print "Base Station successfully setup"
    sys.exit(0)


else:
    try:
        dstID = int(sys.argv[3])
    except:
        print "Error: wrong usage"
        print "Usage:python {0} Port NodeID [DstID,HexFile.hex|SetupBaseStation]".format(sys.argv[0])
        print "\nUsage examples:"
        print "Usage 1: To Program the copiled APP to node 1 (and set its ID also to 1) ov-"
        print "         er radio through BaseStation connected to /dev/ttyUSB0"
        print "           Command:{0} /dev/ttyUSB0 1".format(sys.argv[0])
        print "Usage 2: To Program the copiled APP to node 1 but set its ID also to 2 ov-"
        print "         er radio through BaseStation connected to /dev/ttyUSB0"
        print "           Command:{0} /dev/ttyUSB0 1 2".format(sys.argv[0])
        print "Usage 3: To Program the a specific HEX file to node 1 over radio through Ba-"
        print  "        seStation connected to /dev/ttyUSB0"
        print "           Command:{0} /dev/ttyUSB0 1 main.hex".format(sys.argv[0])
        print "Usage 4: To initially program a node (connected to /dev/ttyUSB0) to make it "
        print "          a Radio programming basestation"
        print "           Command:{0} /dev/ttyUSB0 0 SetupBaseStation\n".format(sys.argv[0])
        sys.exit(1)
    fname = "build/telosb/main"
    if os.path.isfile(fname+".ihex")==False:
        print "Error: can not find file {0}.ihex, build your code first".format(fname)
        sys.exit()
    cmdarg= "tos-set-symbols --objcopy msp430-objcopy --objdump msp430-objdump --target ihex {0}.ihex {0}.ihex.out-{1} TOS_NODE_ID={1} ActiveMessageAddressC__addr={1}".format(fname,dstID)
    if subprocess.call(cmdarg,shell=True):
        print "Error: gernerating programming file error"
        sys.exit(1)
    fin = open("{0}.ihex.out-{1}".format(fname,dstID))

try:
    pkt = Packet(sys.argv[1])
except:
    print "Error: unable to open port {0}, check it availability\n".format(sys.argv[1])
    sys.exit(1)

bsl=RFBsl()
if bsl.Program(pkt,dst,fin)==True:
    ret = 0
else:
    ret = 1
if 'fname' in locals():
    cmdarg="rm {0}.ihex.out-{1}".format(fname,dstID)
    subprocess.call(cmdarg,shell=True)
sys.exit(ret)
